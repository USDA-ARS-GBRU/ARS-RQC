#!/usr/env/python3
# rqcparser.py - A module for parsing files generated by rqcfilter
# Adam Rivers 02/2017 USDA-ARS-GBRU

import json
import pandas as pd
import numpy as np
import rqcmain


def _header_lines(file, symbol='#'):
    """returns number of header lines at the beginning of a file"""
    with open(file, 'r') as f:
        lc = 0
        for line in f:
            if line.startswith(symbol):
                lc += 1
            else:
                return lc

def txt_to_df_simpleheader(file):
    """Converts tabular files with one header line preceded by a # to a \
    pandas dataframe then returns a dictionary of that dataframe"""
    try:
        f = os.path.abspath(file)
        dta = pd.read_csv(f, sep="\t")
        # Trim off leading #, if present
        if dta.columns[0].startswith('#'):
            dta.rename(columns={dta.columns[0]: dta.columns[0][1:]}, inplace=True)
        return dta.to_dict()
    except RuntimeError:
        print("could not parse the file {}".format(file))

def select_pfunc(file):
    try:
        fbase = os.path.basename(file)
        with open("data/parameters.json", 'r') as p:
        fastq_parameters = json.load(p)
        pfunc = fastq_parameters["parser"]["fbase"]
        return pfunc
    except IOError:
        print("Could not determine the correct parsing function to use for the \
              file {}. Check the paramaters.json file".format(file))

def parse_dir(dir)):

    """ takes a file path looks the file name up in the parameters file and \
    returns a dataframe"""
    bname = os.path.basename(dir)
    ddict = {}
    for file in os.listdir(dir):
        try:
            pfunc = select_pfunc(file)
            result = eval(pfunc + '(' + file + ')')
            ddict[bname][os.path.basename(file)]=result
        except IOError:
            print("could not parse file {}".format(file))
            pass
    return ddict
